# Exerc√≠cio 4: Agora vamos para a camada de transporte. Crie um servidor
#  TCP usando o m√≥dulo socketserver que j√° vem embutido com o Python. Nosso
#  servidor TCP dever√°:

# Responder com um ‚ÄúOl√°, client‚Äù, logo quando estabelecer uma conex√£o.


# Imprimir no console todo dado recebido.

# Responder com os dados recebidos (como um eco).

# Utilizar a porta 8085.

# Perceba que o servidor sozinho n√£o faz nada. Ele precisa que algu√©m
#  se conecte a ele. Ent√£o para test√°-lo voc√™ pode utilizar o comando telnet
# localhost 8085, onde telnet √© a aplica√ß√£o que vamos utilizar, localhost
#  √© o local onde o servidor est√° (no caso, o seu pr√≥prio PC) e 8085 √©
# a porta em que o servidor est√° escutando conex√µes.

# üëÄ De olho nas dicas:

# A documenta√ß√£o do m√≥dulo traz exemplos de como instanciar seu servidor
# TCP;
# Na mesma documenta√ß√£o temos exemplos de classes para responder as
#  requisi√ß√µes;
# Os dados na requisi√ß√£o vem em bytes, n√£o strings! bytes podem ser
# decodificados em string com a codifica√ß√£o correta;
# Do mesmo jeito, para responder voc√™ pode precisar codificar strings em
#  bytes;
# telnet sempre envia ASCII, j√° o netcat envia no encoding do sistema
# (em Linux, geralmente utf-8, mas confirme com o comando locale).
from socketserver import TCPServer, StreamRequestHandler

ADDRESS = '', 8085


class EchoHandler(StreamRequestHandler):
    """Responde requisi√ß√µes repetindo o que foi recebido."""

    def handle(self):
        # Usar b'' √© um jeito literal de escrever bytes em ascii
        self.wfile.write(b"Ola Cliente!\n")
        # self.wfile e self.rfile s√£o canais de entrada e sa√≠da
        # programados para ter a mesma interface de arquivos!
        for line in self.rfile:
            # esta linha responde o cliente
            self.wfile.write(line)
            # esta linha imprime no console
            print(line.decode('ascii').strip())


if __name__ == "__main__":
    # usando with nosso TCPServer vai arrumar a casa direitinho quando
    # encerrado
    with TCPServer(ADDRESS, EchoHandler) as server:
        server.serve_forever()
